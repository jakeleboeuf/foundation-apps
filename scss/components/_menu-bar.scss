/*
  MENU BAR
  --------

  A generic, flexible menu component.

  Features:
   - Orient horizontally and vertically
     - Change orientation at certain breakpoints
   - Items with icons above, below, or to the left or right
   - Text labels for vertical menus and badges for horizontal menus
*/

$menubar-fontsize: 0.75rem !default;
$menubar-background: #fff !default;
$menubar-background-hover: $primary-color !default;
$menubar-color: #fff !default;
$menubar-color-hover: $primary-color !default;
$menubar-border: 0 !default;

$menubar-item-padding: 0.25rem !default;
$menubar-icon-size: 25px !default;

// Menu bar container
%menu-bar {
  display: flex;
  align-items: stretch;
  margin: 0;
  list-style-type: none;

  // Menu item
  li {
    // This flex setting makes each item an equal width
    flex: 1 0 0px;
    align-items: center;

    // Link inside menu item
    a {
      display: flex;
      flex-flow: column nowrap;
      align-items: center;
      padding: $menubar-item-padding;
      font-size: $menubar-fontsize;
      line-height: 1;
    }
  }
}

@mixin menu-bar-layout (
  $orientation: horizontal
) {
  @if $orientation == horizontal {
    flex-flow: row nowrap;
    a {
      flex-flow: column nowrap;
      border-bottom-width: 0;
      border-left-width: 1px;
    }
  }
  @else {
    flex-flow: column nowrap;
    a { 
      flex-flow: row nowrap;
      border-left-width: 0;
      border-bottom-width: 1px;
    }

  }
}
@mixin menu-bar-icons(
  $position: left,
  $size: $menubar-icon-size
) {
  li {
    // Sizing
    @if $menubar-icon-size != false {
      width: $menubar-icon-size;
      height: $menubar-icon-size;
    }

    // Position
    @if $position == left {
      a {
        flex-flow: row nowrap;
        align-items: center;
        img { margin-right: $menubar-item-padding * 2; }
        span { margin-top: 0; }
      }
    }
    @if $position == top {
      img {
        & + span {
          margin-top: $menubar-item-padding;
        }
      }
    }
    @if $position == right {
      a {
        flex-flow: row-reverse nowrap;
        img { margin-left: $menubar-item-padding + 2; }
        span { margin-top: 0; }
      }
    }
    @if $position == bottom {
      a {
        flex-flow: column-reverse nowrap;
        img + span { margin-top: 0; margin-bottom: $menubar-item-padding + 2; }
      }
    }
  }
}
@mixin menu-bar-style(
  $background: $menubar-background,
  $background-hover: $menubar-background-hover,
  $color: $menubar-color,
  $color-hover: $menubar-color-hover,
  $border: $menubar-border
) {
  // Container
  background: $background;
  color: $color;

  // Items
  a {
    @if $color == auto {
      color: isitlight($background, $primary-color, #fff);
    }
    @else {
      color: $color;
    }

    &:hover {
      background: $background-hover;
    }
  }

  // Item borders
  @if hasvalue($menubar-border) {
    &:not(:first-child) {
      border-left: $menubar-border;
      &:hover {
        &, & + li {
          border-color: $primary-color;
        }
      }
    }
  }
}

/*
  Mixins
*/
@mixin menu-bar() {
  @extend %menu-bar;
  @include menu-bar-layout;
  @include menu-bar-icons;
  @include menu-bar-style;
}

/*
  CSS output
*/
.menu-bar {
  @include menu-bar;

  &.icon-top    { @include menu-bar-icons(top); }
  &.icon-right  { @include menu-bar-icons(right); }
  &.icon-bottom { @include menu-bar-icons(bottom); }
  &.icon-left   { @include menu-bar-icons(left); }

  &.horizontal  { @include menu-bar-layout(horizontal); }
  &.vertical    { @include menu-bar-layout(vertical); }

  @each $size, $breakpoint in ('medium': $medium-up, 'large': $large-up) {
    @media #{$breakpoint} {
      &.#{$size}-horizontal {
        @include menu-bar-layout(horizontal);
      }
      &.#{$size}-vertical {
        @include menu-bar-layout(vertical);
      }
    }
  }
}
